{"version":3,"sources":["components/Map.js","util/firebase.js","util/config.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ColoredCircle","state","color","handleClick","e","props","gp","setState","x","evt","screenX","y","screenY","console","log","Konva","Util","getRandomColor","width","height","fill","this","shadowBlur","onClick","React","Component","Map","window","innerWidth","innerHeight","text","parent","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","App","database","ref","set","updatedAt","Date","now","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"uOAIMA,E,2MACJC,MAAQ,CACNC,MAAO,S,EAETC,YAAc,SAACC,GACb,EAAKC,MAAMC,GAAGC,SAAS,CAACC,EAAGJ,EAAEK,IAAIC,QAASC,EAAGP,EAAEK,IAAIG,UACnDC,QAAQC,IAAIV,EAAEK,KACd,EAAKF,SAAS,CACZL,MAAOa,IAAMC,KAAKC,oB,wEAIpB,OACE,kBAAC,SAAD,CACET,EAAG,IACHG,EAAG,IACHO,MAAO,IACPC,OAAQ,IACRC,KAAMC,KAAKpB,MAAMC,MACjBoB,WAAY,EACZC,QAASF,KAAKlB,kB,GApBMqB,IAAMC,WA0BbC,E,iLAKjB,OACE,kBAAC,QAAD,CAAOR,MAAOS,OAAOC,WAAYT,OAAQQ,OAAOE,aAC9C,kBAAC,QAAD,KACE,kBAAC,OAAD,CAAMC,KAAK,sBACX,kBAAC,EAAD,CAAexB,GAAIe,KAAKhB,MAAM0B,e,GATPN,a,iBC3BjCO,IAASC,cCHM,CACbC,OAAQ,0CACNC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBDJnBT,IAASU,YAEMV,QAAf,EEwBeW,E,YAvBb,WAAYtC,GAAQ,IAAD,8BACjB,4CAAMA,KACDJ,MAAQ,CAACO,GAAI,EAAGG,GAAI,GAFR,E,sEAYjB,OANAqB,EAASY,WAAWC,IAAI,iBAAiBC,IAAI,CAC3CC,UAAWC,KAAKC,MAChBzC,EAAGa,KAAKpB,MAAMO,EACdG,EAAGU,KAAKpB,MAAMU,IAId,yBAAKuC,UAAU,OACb,kBAAC,EAAD,CAAKnB,OAAQV,OACb,gDACqBA,KAAKpB,MAAMO,EADhC,QACwCa,KAAKpB,MAAMU,Q,GAjBzCa,IAAMC,WCMJ0B,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.ead4f2f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Stage, Layer, Circle, Text } from 'react-konva';\nimport Konva from 'konva';\n\nclass ColoredCircle extends React.Component {\n  state = {\n    color: 'green'\n  };\n  handleClick = (e) => {\n    this.props.gp.setState({x: e.evt.screenX, y: e.evt.screenY})\n    console.log(e.evt)\n    this.setState({\n      color: Konva.Util.getRandomColor()\n    });\n  };\n  render() {\n    return (\n      <Circle\n        x={300}\n        y={300}\n        width={500}\n        height={500}\n        fill={this.state.color}\n        shadowBlur={5}\n        onClick={this.handleClick}\n      />\n    );\n  }\n}\n\nexport default class Map extends Component {\n  render() {\n    // Stage is a div container\n    // Layer is actual canvas element (so you may have several canvases in the stage)\n    // And then we have canvas shapes inside the Layer\n    return (\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Text text=\"Try click on rect\" />\n          <ColoredCircle gp={this.props.parent} />\n        </Layer>\n      </Stage>\n    );\n  }\n}","import firebase from \"firebase\"\nimport config from \"./config\"\n\nfirebase.initializeApp(config)\nfirebase.analytics()\n\nexport default firebase","export default {\n  apiKey: \"AIzaSyB6FhPosutJMMMldh3LJqfpExGX7pTcQgo\",\n    authDomain: \"vight-e89db.firebaseapp.com\",\n    databaseURL: \"https://vight-e89db.firebaseio.com\",\n    projectId: \"vight-e89db\",\n    storageBucket: \"vight-e89db.appspot.com\",\n    messagingSenderId: \"340978134053\",\n    appId: \"1:340978134053:web:6d333045466f8744c1e3cc\",\n    measurementId: \"G-X8FV7M9GHJ\"\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Map from \"./components/Map\"\nimport firebase from \"./util/firebase\"\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = {x: -1, y: -1}\n  }\n\n  render() {\n    firebase.database().ref(\"spawnLocation\").set({\n      updatedAt: Date.now(),\n      x: this.state.x,\n      y: this.state.y\n    })\n    \n    return (\n      <div className=\"App\">\n        <Map parent={this}/>\n        <p>\n          Last click was on {this.state.x} and {this.state.y}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}